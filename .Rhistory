system("R CMD config LAPACK_LIBS")
system("R CMD config BLAS_LIBS")
withr::with_options(list(repos = c(CRAN = "https://cloud.r-project.org/")),
{callr::default_repos()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran")) })
# devtools::check(args = c("--no-manual", "--as-cran"))
devtools::build(manual = TRUE)
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
mod
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
mod
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- cv.comprf(y, x, ntrees = 2, nfeatures = 5, minleaf = 10, nfolds = 2)
μοδ
mod
comp.rf2 <- function(xnew = x, y, x, type = "alr", ntrees, nfeatures, minleaf,
ncores = 0) {
if ( type == "alr" )  y <- Compositional::alr(y)
est <- MultivariateRandomForest::build_forest_predict(trainX = x,
trainY = y,
n_tree = ntrees, m_feature = nfeatures, min_leaf = minleaf, testX = xnew)
# est <- .build_forest_predict_cpp(trainX = x, trainY = y,
#                                  n_tree = ntrees,
#                                  m_feature = nfeatures,
#                                  min_leaf = minleaf,
#                                  testX = xnew,
#                                  nCores = ncores)
Compositional::alrinv(est)
}
bench::mark(comp.rf(x[1:100, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
comp.rf2(x[1:100, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
check=FALSE)
bench::mark(CompositionalRF::comp.rf(x[1:100, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
comp.rf2(x[1:100, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
check=FALSE)
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(15000 * 100), ncol = 100 )
mod <- comp.rf(x[1:100, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(1500 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
bench::mark(CompositionalRF::comp.rf(x[1:100, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
comp.rf2(x[1:100, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
check=FALSE)
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
bench::mark(CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
comp.rf2(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
check=FALSE)
600/15
bench::mark(CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
comp.rf2(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10),
check=FALSE)
CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10) -
comp.rf2(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
set.seed(123)
x1 <- CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
set.seed(123)
x2 <- comp.rf2(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
x1 - x2
set.seed(123)
x1 <- CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
x1
set.seed(123)
x1 <- CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
x1
x1
set.seed(123)
x2 <- comp.rf2(x[1:10, ], y, x, ntrees = 2, nf
set.seed(123)
x2 <- comp.rf2(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
x2
comp.rf2(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
comp.rf2(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
CompositionalRF::comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
x <- matrix(nrow=10000, ncol=100)
x[100,100]
x <- matrix(nrow=10000, ncol=1000)
x[100,100]
x <- matrix(nrow=10000, ncol=10000)
x[100,100]
bench::mark(x[100,100], x[100 + 100 * 10000])
bench::mark(x[100,100], x[100 + 100 * 10000])
bench::mark(x[100,100], x[100 + 1000000])
bench::mark(x[100,100], x[100 + 1000000])
Compositional::alrinv
exp(c(1L, 2L))
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
mod
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
mod
bench::mark(comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10))
bench::mark(comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10))
bench::mark(comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10))
bench::mark(comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10), min_iterations = 1000)
bench::mark(comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10), min_iterations = 1000)
library(CompositionalRF)
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10, ncores=2)
mod
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10, ncores=24)
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10, ncores=240)
mod
library(CompositionalRF)
library(CompositionalRF)
source("~/GitHub/CompositionalRF/R/cv.alfacomprf.R")
source("~/GitHub/CompositionalRF/R/alfa.comp.rf.R")
Compositional::alfainv
library(CompositionalRF)
y <- as.matrix(iris[, 1:4])
y <- y/ rowSums(y)
x <- matrix( rnorm(150 * 10), ncol = 10 )
mod <- comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
mod
comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
ly=Compositional::alr(y)
comp.rf(x[1:10, ], ly, x, ntrees = 2, nfeatures = 5, minleaf = 10)
comp.rf(x[1:10, ], ly, x, type = "r", ntrees = 2, nfeatures = 5, minleaf = 10)
comp.rf(x[1:10, ], y, x, ntrees = 2, nfeatures = 5, minleaf = 10)
